#!/bin/bash

# save-todos.sh - Process TodoWrite tool data and save as individual markdown files
# This script is called by Claude Code hooks when TodoWrite tool is used

TASKS_DIR=".claude/tasks"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

# Ensure tasks directory exists
mkdir -p "$TASKS_DIR"

# Function to sanitize filename
sanitize_filename() {
    local input="$1"
    # Convert to lowercase, replace spaces with hyphens, remove special chars, limit length
    echo "$input" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9 -]//g' | sed 's/ \+/-/g' | cut -c1-50 | sed 's/-*$//'
}

# Function to create unique filename if duplicate exists
get_unique_filename() {
    local base_name="$1"
    local filename="$base_name.md"
    local counter=1
    
    while [[ -f "$TASKS_DIR/$filename" ]]; do
        filename="${base_name}-${counter}.md"
        ((counter++))
    done
    
    echo "$filename"
}

# Read stdin for todo data (this would come from the hook context)
# For now, we'll create a template that can be expanded
if [[ -p /dev/stdin ]]; then
    TODO_DATA=$(cat)
else
    # If no stdin, create a placeholder
    TODO_DATA="No todo data received"
fi

# Parse environment variables that might contain todo information
# Claude Code hooks can pass data through environment variables
if [[ -n "$CLAUDE_TOOL_ARGS" ]]; then
    # Extract todo items from tool arguments (this is conceptual - actual parsing would depend on Claude's hook data format)
    echo "Processing todo data from Claude Code..." > "$TASKS_DIR/.last-update.log"
    echo "Timestamp: $TIMESTAMP" >> "$TASKS_DIR/.last-update.log"
    echo "Tool Args: $CLAUDE_TOOL_ARGS" >> "$TASKS_DIR/.last-update.log"
fi

# Create or update a summary file for all current todos
cat > "$TASKS_DIR/README.md" << EOF
# Todo Tasks

Auto-generated by Claude Code on $TIMESTAMP

This folder contains individual markdown files for each todo task created using the TodoWrite tool.

## Files:
$(ls -1 "$TASKS_DIR"/*.md 2>/dev/null | grep -v README.md | sed 's|.*/||' | sed 's/^/- /' || echo "- No task files yet")

## Last Update:
$TIMESTAMP
EOF

# Example of how individual task files would be created
# This is a template - actual implementation would parse the todo data structure
create_sample_task() {
    local task_content="$1"
    local status="$2"
    local priority="$3"
    
    local safe_name=$(sanitize_filename "$task_content")
    local filename=$(get_unique_filename "$safe_name")
    
    cat > "$TASKS_DIR/$filename" << EOF
# $task_content

**Status:** $status  
**Priority:** $priority  
**Created:** $TIMESTAMP

## Description
$task_content

## Notes
- Auto-created by Claude Code TodoWrite hook
- Edit this file to add additional notes or details

## Status Updates
- $TIMESTAMP: Created with status '$status'
EOF

    echo "Created task file: $filename"
}

# Log the hook execution
echo "$(date): save-todos.sh executed" >> "$TASKS_DIR/.hook-log"

# Make the script executable
chmod +x "$0" 2>/dev/null || true